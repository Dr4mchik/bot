import asyncio
import datetime
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode

TOKEN = "5817191373:AAG3bDIu46VjB17IRu96NaVmRNfZrc3a79s"
# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = Bot(TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("–ü—Ä–∏–≤–µ—Ç–∏–∫, —Å–æ–ª–Ω—ã—à–∫–æ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –±—É–¥–µ—Ñ –¥–µ–ª–∞—Ç—å!",
                        reply_markup=get_food_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –µ–¥—ã (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω)
def get_food_menu():
    markup = types.InlineKeyboardMarkup(row_width=3)
    breakfast_button = types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫–∞—Ç—å üç≥", callback_data='–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å')
    lunch_button = types.InlineKeyboardButton("–û–±–µ–¥–∞—Ç—å üçî", callback_data='–æ–±–µ–¥–∞—Ç—å')
    dinner_button = types.InlineKeyboardButton("–£–∂–∏–Ω–∞—Ç—å üç≤", callback_data='—É–∂–∏–Ω–∞—Ç—å')
    markup.add(breakfast_button, lunch_button, dinner_button)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –µ–¥—ã (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω)
@dp.callback_query_handler(lambda query: query.data in ['–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å', '–æ–±–µ–¥–∞—Ç—å', '—É–∂–∏–Ω–∞—Ç—å'])
async def process_food_type(callback_query: types.CallbackQuery):
    food_type = callback_query.data
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–¢—ã –≤—ã–±—Ä–∞–ª–∞ {food_type}. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ñ—Ç–æ –º–æ–π –∫–æ—Ç–µ–Ω–æ–∫ –±—É–¥–µ—Ç –∫—É—Ñ–∞—Ç—å:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–∫–∞–∑–æ–º –µ–¥—ã
@dp.message_handler(lambda message: True)
async def process_food_order(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –µ–¥—ã
    order_text = message.text.strip()

    if order_text:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.datetime.now().strftime("%d-%m %H:%M")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        await message.answer(f"–¢–æ —á—Ç–æ —Ç—ã –ø–æ–∫—É—à–∞–ª–∞, –∞ –∏–º–µ–Ω–Ω–æ '{order_text}'  –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–≤–æ–µ–º—É –º–∞–ª—å—á–∏–∫—É –≤ {now}",
                              reply_markup=types.ReplyKeyboardRemove())
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await bot.send_message(chat_id='963433317', text=f"–ó–∞–π–∫–∞ ({message.from_user.full_name}) –ø–æ–µ–ª–∞ {order_text} –≤ {now}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler(exception=Exception)
async def error_handler(update: types.Update, exception: Exception):
    print(f"Exception: {exception}")
    await update.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(dp.start_polling())